{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","style","width","src","alt","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"qLAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCFDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAgB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,KAElBO,QAAQC,IAAI,iBAIZ,SACI,uBACIC,KAAK,OACLC,MAAQX,EACRY,SAlBc,SAACT,GACvBF,EAAeE,EAAEU,OAAOF,a,+BCTnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCGPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IASlC,OACI,sBAAKc,UAAU,2BAA2BC,MAAO,CAACC,MAAO,SAAzD,UACI,qBAAKF,UAAU,eAAeG,IAAKjB,EAAKkB,IAAKR,IAC7C,qBAAKI,UAAU,YAAf,SACI,mBAAGA,UAAU,YAAb,SAA0BJ,UCV7BS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EACdhB,mBAAS,CAChCuB,KAAM,GACNe,SAAS,IAH4B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAW,WACP1B,EAASC,GACJxB,MAAM,SAAAkD,GACCF,EAAS,CACLjB,KAAMmB,EACNJ,SAAS,SAG1B,CAACtB,IAEGuB,EDZ0BI,CAAc3B,GAAlCa,EADwB,EAC7BN,KAAae,EADgB,EAChBA,QACrB,OACI,qCACI,qBAAIN,UAAU,cAAd,cAA+BhB,KAC7BsB,GAAW,2CACb,qBAAKN,UAAU,+CAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEZ7BiB,EAAe,SAAC,GAAqC,IAAD,IAAlCC,yBAAkC,MAAhB,CAAC,SAAe,IACzB7C,mBAAS6C,GADgB,mBACtDC,EADsD,KAC1C/C,EAD0C,KAG7D,OACI,qCACI,sBAAKiC,UAAU,YAAf,UACI,8CACA,cAAC,EAAD,CAAajC,cAAeA,IAC5B,0BAEJ,qBAAKiC,UAAU,YAAf,SAEQc,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCXlC+B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,SAM5B7D,M","file":"static/js/main.f3e2ba1e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n        console.log('submit hecho');  \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>    \r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>    \r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=Zc07NV1IhW0tA6UDimpQgvBWhL2N3mdy`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ( { title, url} ) => {\r\n    // console.log( { title, url} );\r\n    // return (\r\n    //     <div className=\"card animate__animated animate__fadeIn\">\r\n    //         <img src={ url } alt={ title} />\r\n    //         <p> { title } </p>\r\n    //     </div>\r\n    // )\r\n\r\n    return (\r\n        <div className=\"card shadow bg-light m-2\" style={{width: '18rem'}}>\r\n            <img className=\"card-img-top\" src={url} alt={title}/>\r\n            <div className=\"card-body\">\r\n                <p className=\"card-text\">{title}</p>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n","import React  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem'\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    return (\r\n        <>\r\n            <h3 className=\"text-center\"> { category }</h3>\r\n            { loading && <p>Loading...</p> }\r\n            <div className=\"d-flex justify-content-center flex-wrap my-2\">\r\n                    { \r\n                        images.map( img => (\r\n                            <GifGridItem \r\n                                key={ img.id }\r\n                                { ...img } \r\n                        />\r\n                        ))\r\n                    \r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n       data: [],\r\n       loading: true \r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });  \r\n            });\r\n    }, [category]);\r\n\r\n    return state; // {data: [], loading: true}\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ({ defaultCategories=['gatos'] }) => {\r\n    const [categories, setCategories] = useState(defaultCategories);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"jumbotron\">\r\n                <h2>GifExpertApp</h2>\r\n                <AddCategory setCategories={setCategories}/>\r\n                <hr/>\r\n            </div> \r\n            <div className=\"container\">    \r\n                {   \r\n                    categories.map( category => \r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}